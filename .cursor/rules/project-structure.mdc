---
alwaysApply: true
---
# Project structure and entry points

- Primary server entry: [`mcp_server.py`](mdc:mcp_server.py) — MCP stdio server (Spotify tools exposed via FastMCP)
- Spotify logic: [`spotify_tools.py`](mdc:spotify_tools.py) — Spotipy auth, search, playback, playlists, liked songs
- Central config/env: [`config.py`](mdc:config.py) — loads/validates SPOTIPY_* envs, optional scope/cache
- Docker auth initializer: [`auth_init.py`](mdc:auth_init.py) — copy/paste OAuth in Docker, writes token to cache
- Top-level docs: [`README.md`](mdc:README.md)

Subprojects (registry-friendly builds):
- Spotify image sources: [`spotify/Dockerfile`](mdc:spotify/Dockerfile), [`spotify/mcp_server.py`](mdc:spotify/mcp_server.py), [`spotify/spotify_tools.py`](mdc:spotify/spotify_tools.py), [`spotify/requirements.txt`](mdc:spotify/requirements.txt), [`spotify/README.md`](mdc:spotify/README.md)
- Telegram image sources: [`telegram/Dockerfile`](mdc:telegram/Dockerfile), [`telegram/mcp_server.py`](mdc:telegram/mcp_server.py), [`telegram/requirements.txt`](mdc:telegram/requirements.txt), [`telegram/README.md`](mdc:telegram/README.md)

Notes:
- The MCP server communicates strictly over stdio; do not expose ports.
- Docker images rely on env provided by the MCP client; token/session persistence is via a bind mount to `/app/.cache`.
