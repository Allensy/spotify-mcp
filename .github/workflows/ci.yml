name: CI

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main, develop]
    workflow_dispatch:

env:
    PYTHON_DEFAULT_VERSION: "3.11"

jobs:
    test:
        name: Test (Python ${{ matrix.python-version }})
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                python-version: ["3.10", "3.11", "3.12"]
                os: [ubuntu-latest]
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ matrix.python-version }}
                  cache: "pip"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -e ".[dev,test]"

            - name: Run tests
              env:
                  SPOTIPY_CLIENT_ID: test-client-id
                  SPOTIPY_CLIENT_SECRET: test-client-secret
                  SPOTIPY_REDIRECT_URI: http://localhost:8888/callback
              run: |
                  pytest --cov=spotify_mcp --cov-report=xml --cov-report=term-missing

    lint:
        name: Lint & Format Check
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
                  cache: "pip"

            - name: Install linting dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -e ".[dev]"

            - name: Run black (check)
              run: black --check src/ tests/

            - name: Run ruff
              run: ruff check src/ tests/ || true

            - name: Run pylint
              run: pylint src/spotify_mcp/ || true

            - name: Run mypy
              run: mypy src/ || true || true

    typecheck:
        name: Type Check
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
                  cache: "pip"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -e ".[dev]"

            - name: Run mypy
              run: mypy src/ || true || true

    security:
        name: Security Scan
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
                  cache: "pip"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install safety bandit

            - name: Check dependencies with Safety
              run: |
                  pip list --format=json > /tmp/dependencies.json
                  safety check --json || true

            - name: Run Bandit security linter
              run: |
                  bandit -r src/ -f json -o bandit-report.json || true
                  bandit -r src/

    docker:
        name: Docker Build & Test
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: false
                  load: true
                  tags: spotify-mcp:test
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Test Docker image
              run: |
                  docker run --rm spotify-mcp:test python -c "import spotify_mcp; print('Import successful')"

    coverage:
        name: Coverage Report
        runs-on: ubuntu-latest
        needs: test
        if: github.event_name == 'pull_request'
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
                  cache: "pip"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -e ".[dev,test]"

            - name: Run tests with coverage
              env:
                  SPOTIPY_CLIENT_ID: test-client-id
                  SPOTIPY_CLIENT_SECRET: test-client-secret
                  SPOTIPY_REDIRECT_URI: http://localhost:8888/callback
              run: |
                  pytest --cov=spotify_mcp --cov-report=html --cov-report=term

            - name: Upload coverage report
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-report
                  path: htmlcov/

    all-checks:
        name: All Checks Status
        runs-on: ubuntu-latest
        needs: [test, lint, typecheck, security, docker]
        if: always()
        steps:
            - name: Check job results
              run: |
                  if [ "${{ needs.test.result }}" != "success" ] || \
                     [ "${{ needs.lint.result }}" != "success" ] || \
                     [ "${{ needs.typecheck.result }}" != "success" ] || \
                     [ "${{ needs.docker.result }}" != "success" ]; then
                    echo "One or more checks failed"
                    exit 1
                  fi
