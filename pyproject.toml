[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "spotify-mcp"
version = "1.0.0"
description = "Model Context Protocol server for Spotify - Control Spotify through AI assistants"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Spotify MCP Contributors"}
]
maintainers = [
    {name = "Spotify MCP Contributors"}
]
keywords = [
    "spotify",
    "mcp",
    "model-context-protocol",
    "ai",
    "assistant",
    "music",
    "api",
    "claude",
    "cursor"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Multimedia :: Sound/Audio",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Typing :: Typed",
]
dependencies = [
    "spotipy>=2.25.0",
    "python-dotenv>=1.0.1",
    "mcp>=1.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "pylint>=2.15.0",
    "ruff>=0.1.0",
    "safety>=2.3.0",
    "bandit>=1.7.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinx-autodoc-typehints>=1.19.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
]

[project.scripts]
spotify-mcp = "spotify_mcp.cli.main:main_cli"
spotify-mcp-auth = "spotify_mcp.cli.main:auth_init"

[project.urls]
Homepage = "https://github.com/yourusername/spotify-mcp"
Documentation = "https://github.com/yourusername/spotify-mcp#readme"
Repository = "https://github.com/yourusername/spotify-mcp"
"Bug Tracker" = "https://github.com/yourusername/spotify-mcp/issues"
Changelog = "https://github.com/yourusername/spotify-mcp/blob/main/CHANGELOG.md"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["spotify_mcp*"]
namespaces = false

[tool.setuptools.package-data]
spotify_mcp = ["py.typed"]

# Black configuration
[tool.black]
line-length = 79
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "spotipy.*"
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=spotify_mcp",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Ruff configuration
[tool.ruff]
line-length = 79
target-version = "py310"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

# Pylint configuration
[tool.pylint.messages_control]
disable = [
    "C0330",
    "C0326",
    "line-too-long",
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
]

[tool.pylint.format]
max-line-length = "79"

[tool.pylint.basic]
good-names = ["i", "j", "k", "ex", "Run", "_", "id", "sp"]

[tool.pylint.design]
max-args = 10
max-locals = 20
max-returns = 6
max-branches = 15

